#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub struct {{exception.ident}} {
    {{~#each exception.fields as |field|}}
    {{#if field.optional ~}}
    pub {{field.ident}}: Option<{{to_rust field.ty}}>,
    {{~^~}}
    pub {{field.ident}}: {{to_rust field.ty}},
    {{~/if~}}
    {{~/each}}
}

impl Serialize for {{exception.ident}} {
    fn serialize<S>(&self, s: &mut S) -> Result<(), Error>
        where S: Serializer + ThriftSerializer
    {
        try!(s.write_struct_begin("{{exception.ident}}"));
        {{#each exception.fields as |field|~}}
        {{#if field.optional}}
        if self.{{field.ident}}.is_some() {
            try!(s.write_field_begin("{{field.ident}}", {{to_protocol field.ty}}, {{field.seq}}));
            try!(self.{{field.ident}}.unwrap().serialize(s));
            try!(s.write_field_end());
        }
        {{~^~}}
        try!(s.write_field_begin("{{field.ident}}", {{to_protocol field.ty}}, {{field.seq}}));
        try!(self.{{field.ident}}.serialize(s));
        try!(s.write_field_end());
        {{~/if~}}
        {{~/each}}
        try!(s.write_field_stop());
        try!(s.write_struct_end());
        Ok(())
    }
}


impl Deserialize for {{exception.ident}} {
    fn deserialize<D>(de: &mut D) -> Result<Self, Error>
        where D: Deserializer + ThriftDeserializer,
    {
        try!(de.read_struct_begin());
        {{~#each exception.fields as |field|}}
        let mut {{field.ident}} = None;
        {{~/each}}
        loop {
            let scheme_field = try!(de.read_field_begin());
            if scheme_field.ty == ThriftType::Stop {
                break;
            };
            match scheme_field.seq {
                {{~#each exception.fields as |field|}}
                {{field.seq}} => {
                    if scheme_field.ty == {{to_protocol field.ty}} {
                        {{field.ident}} = Some(try!({{expr field.ty}}));
                    } else {
                        // skip
                    }
                },
                {{~/each}}
                _ => (),// skip
            }
            try!(de.read_field_end());
        };
        try!(de.read_struct_end());
        let args = {{exception.ident}} {
            {{~#each exception.fields as |field|}}
            {{#if field.optional ~}}
            {{field.ident}}: {{field.ident}},
            {{~^~}}
            {{field.ident}}: {{field.ident}}.unwrap(),
            {{~/if~}}
            {{~/each}}
        };
        Ok(args)
    }
}
