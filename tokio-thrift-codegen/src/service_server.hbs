#[derive(Clone)]
pub struct {{service.ident}}Server<T>
{
    inner: T,
}

impl <T: {{service.ident}}Service>{{service.ident}}Server<T>
{
    pub fn new(inner: T) -> Self
    {
        {{service.ident}}Server {
            inner: inner
        }
    }
}

impl <T>Service for {{service.ident}}Server<T>
    where T: {{service.ident}}Service
{
    type Request = {{service.ident}}ServiceMethodArgs;
    type Response = {{service.ident}}ServiceMethodReturn;
    type Error = io::Error;
    type Future = BoxFuture<{{service.ident}}ServiceMethodReturn, io::Error>;


    fn call(&self, req: Self::Request) -> Self::Future {
        use {{../namespace}}::{{service.ident}}ServiceMethodArgs::*;
        use {{../namespace}}::{{service.ident}}ServiceMethodReturn::*;
        match req {
            {{~#each service.methods as |method|}}
            A{{method.ident}}(_args)  => self.inner.{{method.ident}}(
                {{~#each method.args as |arg|}}
                _args.{{arg.ident}},
                {{~/each}}
            ).then(|r| finished(R{{method.ident}}(r))).boxed(),
            {{~/each}}
        }
    }
}
